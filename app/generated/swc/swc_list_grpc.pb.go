// Which syntax this file uses.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: swc_list.proto

package swc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SWCList_GetSWCList_FullMethodName     = "/SWCList/GetSWCList"
	SWCList_GetSWCDatabyID_FullMethodName = "/SWCList/GetSWCDatabyID"
)

// SWCListClient is the client API for SWCList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service contract
type SWCListClient interface {
	GetSWCList(ctx context.Context, in *GetSWCListReq, opts ...grpc.CallOption) (*GetSWCListRes, error)
	GetSWCDatabyID(ctx context.Context, in *GetSWCParameterByIdReq, opts ...grpc.CallOption) (*GetSWCParameterByIdRes, error)
}

type sWCListClient struct {
	cc grpc.ClientConnInterface
}

func NewSWCListClient(cc grpc.ClientConnInterface) SWCListClient {
	return &sWCListClient{cc}
}

func (c *sWCListClient) GetSWCList(ctx context.Context, in *GetSWCListReq, opts ...grpc.CallOption) (*GetSWCListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSWCListRes)
	err := c.cc.Invoke(ctx, SWCList_GetSWCList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWCListClient) GetSWCDatabyID(ctx context.Context, in *GetSWCParameterByIdReq, opts ...grpc.CallOption) (*GetSWCParameterByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSWCParameterByIdRes)
	err := c.cc.Invoke(ctx, SWCList_GetSWCDatabyID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SWCListServer is the server API for SWCList service.
// All implementations must embed UnimplementedSWCListServer
// for forward compatibility.
//
// Service contract
type SWCListServer interface {
	GetSWCList(context.Context, *GetSWCListReq) (*GetSWCListRes, error)
	GetSWCDatabyID(context.Context, *GetSWCParameterByIdReq) (*GetSWCParameterByIdRes, error)
	mustEmbedUnimplementedSWCListServer()
}

// UnimplementedSWCListServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSWCListServer struct{}

func (UnimplementedSWCListServer) GetSWCList(context.Context, *GetSWCListReq) (*GetSWCListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSWCList not implemented")
}
func (UnimplementedSWCListServer) GetSWCDatabyID(context.Context, *GetSWCParameterByIdReq) (*GetSWCParameterByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSWCDatabyID not implemented")
}
func (UnimplementedSWCListServer) mustEmbedUnimplementedSWCListServer() {}
func (UnimplementedSWCListServer) testEmbeddedByValue()                 {}

// UnsafeSWCListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SWCListServer will
// result in compilation errors.
type UnsafeSWCListServer interface {
	mustEmbedUnimplementedSWCListServer()
}

func RegisterSWCListServer(s grpc.ServiceRegistrar, srv SWCListServer) {
	// If the following call pancis, it indicates UnimplementedSWCListServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SWCList_ServiceDesc, srv)
}

func _SWCList_GetSWCList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSWCListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWCListServer).GetSWCList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWCList_GetSWCList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWCListServer).GetSWCList(ctx, req.(*GetSWCListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWCList_GetSWCDatabyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSWCParameterByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWCListServer).GetSWCDatabyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWCList_GetSWCDatabyID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWCListServer).GetSWCDatabyID(ctx, req.(*GetSWCParameterByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SWCList_ServiceDesc is the grpc.ServiceDesc for SWCList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SWCList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SWCList",
	HandlerType: (*SWCListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSWCList",
			Handler:    _SWCList_GetSWCList_Handler,
		},
		{
			MethodName: "GetSWCDatabyID",
			Handler:    _SWCList_GetSWCDatabyID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swc_list.proto",
}
